Original program
0. Introduction
- Python is easy to learn
    > Python tutorial
    > Online tips & trick pages
    > interactive python
    > easily accessible, offline docs
- Python is easy to use
    > readable code
    > easily accessible, offline docs
    > concepts are intuitive to apply once understood (Python behaves like you
    expect)
    > There exists very useful idioms which makes common tasks simple to
    implement.
    > There are thousands of libraries available for download which makes even
    less common tasks very simple to execute.
    > Being widely used means that there are plenty of examples out there.
- Python is powerful
    > Python is an interpreted language built using C. This makes Python more
    adaptable than programming languages like C/C++. Python is updated
    periodically with new useful and pragmatic features, helping it to stay
    with new research, technology, and empirical feedback.
    > Python has thousands of libraries able to be customized to make it
    suitable for a variety of tasks. For example, numpy and matplotlib makes it
    competitive against MATLAB, a language made specifically for scientific
    calculation. However, Python is much more versatile than MATLAB.
    > with pypy, Python can run much faster than CPython.

1. Refresher
- Interactive Python and Python as a calculator
- print, and string formatting
- built-in types
    > int, long, float, str
    > True, False, None
- Common operators
    > +=, -=, /=, *=, %=
    > %, **
- if statement
    > relational operators
- function basics
i fib_naive.py && fib.py
d efficiency (fib_naive.py vs. fib_naive.c, vs. pypy)
- range function
- for loops, while loops
    > enumerate
- lists
    > append & pop
    > len, None
    > slicing
    > string.join
- mutability, immutability
- dicts, tuples, and sets
- functions
    > Default parameters
    > positional and keyword arguments.
- naming & scoping
- modules
- xrange
- iterators
- generators
- listcomps, dictcomps, setcomps
- lambda
i 006.py
- built-in methods:
    > sum, max, min, zip
    > sorted, reversed
    > reduce, map, filter
    > any
    > type,

2. Tips
- string.translate
- argparse
i reverse.py
- reverse.py vs. reverse.c
i common_dicts.py
i 008.py

3. Libraries
- smtplib, string.Template
- numpy, matplotlib # To be finished
- docutils # To be finished

4. Interview Questions
- anagrams.py
- no_repreats.py
- substring.py
- travel_planner.py # To be finished

#
- I need to be more patient when others raise an objection. Authority is
  important, or else no progress is made; however, if people aren't satisfied
  with what you said, then it detracts from a complete understanding of the
  material in accordance with what others already know and would like to expand
  upon.
